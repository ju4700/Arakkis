import { useState } from 'react';
import { useAuth } from '../context/AuthContext';

const API_URL = 'https://arakkiss.onrender.com/api';

const shopTypes = ['‡¶∏‡¶¨‡¶ú‡¶ø', '‡¶´‡¶≤', '‡¶Æ‡¶æ‡¶õ', '‡¶Æ‡ßÅ‡¶∞‡¶ó‡¶ø', '‡¶¶‡ßÅ‡¶ó‡ßç‡¶ß‡¶ú‡¶æ‡¶§', '‡¶∂‡¶∏‡ßç‡¶Ø', '‡¶Æ‡¶∏‡¶≤‡¶æ', '‡¶Æ‡¶ø‡¶∂‡ßç‡¶∞'];
const districts = ['‡¶¢‡¶æ‡¶ï‡¶æ', '‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ', '‡¶∞‡¶æ‡¶ú‡¶∂‡¶æ‡¶π‡ßÄ', '‡¶ñ‡ßÅ‡¶≤‡¶®‡¶æ', '‡¶¨‡¶∞‡¶ø‡¶∂‡¶æ‡¶≤', '‡¶∏‡¶ø‡¶≤‡ßá‡¶ü', '‡¶∞‡¶Ç‡¶™‡ßÅ‡¶∞', '‡¶Æ‡¶Ø‡¶º‡¶Æ‡¶®‡¶∏‡¶ø‡¶Ç‡¶π'];

interface ShopFormData {
  name: string;
  description: string;
  type: string;
  location: string;
  district: string;
}

export default function AmarDokan({ onShopCreated }: { onShopCreated: () => void }) {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState<ShopFormData>({
    name: '',
    description: '',
    type: '',
    location: '',
    district: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [nidFront, setNidFront] = useState('');
  const [nidBack, setNidBack] = useState('');
  const { token } = useAuth();

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
    setError('');
  };

  const handleFileChange = (side: 'front' | 'back', e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    
    if (file.size > 10 * 1024 * 1024) {
      setError('‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶Ü‡¶ï‡¶æ‡¶∞ ‡ßß‡ß¶ ‡¶è‡¶Æ‡¶¨‡¶ø ‡¶è‡¶∞ ‡¶ï‡¶Æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá');
      return;
    }

    const reader = new FileReader();
    reader.onloadend = () => {
      const base64 = reader.result as string;
      if (side === 'front') setNidFront(base64);
      else setNidBack(base64);
    };
    reader.readAsDataURL(file);
  };

  const handleStep1Submit = () => {
    if (!formData.name || !formData.type || !formData.description || !formData.location || !formData.district) {
      setError('‡¶∏‡¶¨ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®');
      return;
    }
    setStep(2);
  };

  const handleFinalSubmit = async () => {
    if (!nidFront || !nidBack) {
      setError('‡¶™‡¶∞‡¶ø‡¶ö‡¶Ø‡¶º‡¶™‡¶§‡ßç‡¶∞‡ßá‡¶∞ ‡¶â‡¶≠‡¶Ø‡¶º ‡¶¶‡¶ø‡¶ï‡ßá‡¶∞ ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const shopResponse = await fetch(`${API_URL}/shops`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`
        },
        body: JSON.stringify(formData)
      });

      const shopData = await shopResponse.json();
      if (!shopResponse.ok) throw new Error(shopData.message || '‡¶¶‡ßã‡¶ï‡¶æ‡¶® ‡¶§‡ßà‡¶∞‡¶ø‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');

      await fetch(`${API_URL}/shops/${shopData.shop._id}/verify`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`
        },
        body: JSON.stringify({ nidFront, nidBack })
      });

      setStep(3);
      setTimeout(() => onShopCreated(), 2000);
    } catch (err: any) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  if (step === 3) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center py-12">
        <div className="bg-white rounded-2xl shadow-sm p-12 max-w-2xl text-center">
          <div className="w-24 h-24 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg className="w-12 h-12 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
          </div>
          <h2 className="text-4xl font-bold text-green-700 mb-4">‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®!</h2>
          <p className="text-2xl text-gray-700 mb-8">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¶‡ßã‡¶ï‡¶æ‡¶® ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá</p>
          <div className="animate-pulse text-gray-500">‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100 py-12">
      <div className="max-w-6xl mx-auto px-4">
        <div className="text-center mb-12">
          <div className="inline-flex items-center gap-2 bg-green-50 px-6 py-2 rounded-full mb-4">
            <span className="text-2xl">üè™</span>
            <span className="text-green-700 font-medium">‡¶ï‡ßÉ‡¶∑‡¶ï ‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°</span>
          </div>
          <h1 className="text-5xl font-bold mb-4">
            <span className="text-neutral-800">‡¶¶‡ßã‡¶ï‡¶æ‡¶® </span>
            <span className="text-green-700">{step === 1 ? '‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®' : '‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á‡¶ï‡¶∞‡¶£'}</span>
          </h1>
          <p className="text-2xl text-neutral-800">
            {step === 1 ? '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßÉ‡¶∑‡¶ø‡¶™‡¶£‡ßç‡¶Ø ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶¶‡ßã‡¶ï‡¶æ‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®' : '‡¶™‡¶∞‡¶ø‡¶ö‡¶Ø‡¶º‡¶™‡¶§‡ßç‡¶∞ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á‡¶ï‡¶∞‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®'}
          </p>
        </div>

        <div className="flex justify-center mb-12">
          <div className="flex items-center gap-4">
            <div className={`flex items-center justify-center w-12 h-12 rounded-full ${step >= 1 ? 'bg-green-600 text-white' : 'bg-gray-300'} font-bold`}>1</div>
            <div className={`w-24 h-1 ${step >= 2 ? 'bg-green-600' : 'bg-gray-300'}`} />
            <div className={`flex items-center justify-center w-12 h-12 rounded-full ${step >= 2 ? 'bg-green-600 text-white' : 'bg-gray-300'} font-bold`}>2</div>
            <div className={`w-24 h-1 ${step >= 3 ? 'bg-green-600' : 'bg-gray-300'}`} />
            <div className={`flex items-center justify-center w-12 h-12 rounded-full ${step >= 3 ? 'bg-green-600 text-white' : 'bg-gray-300'} font-bold`}>3</div>
          </div>
        </div>

        {error && (
          <div className="max-w-2xl mx-auto mb-6 bg-red-50 border border-red-200 text-red-700 px-6 py-4 rounded-2xl text-center">
            {error}
          </div>
        )}

        {step === 1 && (
          <div className="bg-white rounded-2xl shadow-sm p-8 max-w-4xl mx-auto">
            <h2 className="text-3xl font-bold mb-8 text-green-700">‡¶¶‡ßã‡¶ï‡¶æ‡¶®‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø</h2>
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-xl font-medium text-gray-700 mb-2">‡¶¶‡ßã‡¶ï‡¶æ‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ *</label>
                  <input
                    type="text"
                    name="name"
                    value={formData.name}
                    onChange={handleInputChange}
                    placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶∞‡¶π‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶∏‡¶¨‡¶ú‡¶ø ‡¶≠‡¶æ‡¶®‡ßç‡¶°‡¶æ‡¶∞"
                    className="w-full px-5 py-4 text-xl border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-green-500"
                  />
                </div>
                <div>
                  <label className="block text-xl font-medium text-gray-700 mb-2">‡¶¶‡ßã‡¶ï‡¶æ‡¶®‡ßá‡¶∞ ‡¶ß‡¶∞‡¶® *</label>
                  <select
                    name="type"
                    value={formData.type}
                    onChange={handleInputChange}
                    className="w-full px-5 py-4 text-xl border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-green-500"
                  >
                    <option value="">‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</option>
                    {shopTypes.map((t) => <option key={t} value={t}>{t}</option>)}
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-xl font-medium text-gray-700 mb-2">‡¶¶‡ßã‡¶ï‡¶æ‡¶®‡ßá‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ *</label>
                <textarea
                  name="description"
                  value={formData.description}
                  onChange={handleInputChange}
                  placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¶‡ßã‡¶ï‡¶æ‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§..."
                  rows={4}
                  className="w-full px-5 py-4 text-xl border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-green-500 resize-none"
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-xl font-medium text-gray-700 mb-2">‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® *</label>
                  <input
                    type="text"
                    name="location"
                    value={formData.location}
                    onChange={handleInputChange}
                    placeholder="‡¶Æ‡¶ø‡¶∞‡¶™‡ßÅ‡¶∞ ‡ßß‡ß¶, ‡¶¢‡¶æ‡¶ï‡¶æ"
                    className="w-full px-5 py-4 text-xl border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-green-500"
                  />
                </div>
                <div>
                  <label className="block text-xl font-medium text-gray-700 mb-2">‡¶ú‡ßá‡¶≤‡¶æ *</label>
                  <select
                    name="district"
                    value={formData.district}
                    onChange={handleInputChange}
                    className="w-full px-5 py-4 text-xl border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-green-500"
                  >
                    <option value="">‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</option>
                    {districts.map((d) => <option key={d} value={d}>{d}</option>)}
                  </select>
                </div>
              </div>

              <div className="flex justify-end pt-6">
                <button
                  onClick={handleStep1Submit}
                  className="px-12 py-4 bg-green-600 hover:bg-green-700 text-white text-2xl font-medium rounded-full transition-colors"
                >
                  ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ß‡¶æ‡¶™ ‚Üí
                </button>
              </div>
            </div>
          </div>
        )}

        {step === 2 && (
          <div className="bg-white rounded-2xl shadow-sm p-8 max-w-5xl mx-auto">
            <h2 className="text-3xl font-bold mb-2 text-green-700 text-center">‡¶™‡¶∞‡¶ø‡¶ö‡¶Ø‡¶º‡¶™‡¶§‡ßç‡¶∞ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á‡¶ï‡¶∞‡¶£</h2>
            <p className="text-xl text-gray-600 text-center mb-8">‡¶õ‡¶¨‡¶ø‡¶∞ ‡¶Ü‡¶ï‡¶æ‡¶∞ ‡ßß‡ß¶ ‡¶è‡¶Æ‡¶¨‡¶ø ‡¶è‡¶∞ ‡¶ï‡¶Æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá</p>

            <div className="space-y-12">
              <div>
                <div className="flex items-center gap-3 mb-4">
                  <span className="text-4xl">üÜî</span>
                  <h3 className="text-2xl font-bold">‡¶™‡¶∞‡¶ø‡¶ö‡¶Ø‡¶º‡¶™‡¶§‡ßç‡¶∞ ‡¶∏‡¶æ‡¶Æ‡¶®‡ßá‡¶∞ ‡¶¶‡¶ø‡¶ï</h3>
                </div>
                <div className="border-2 border-dashed border-gray-300 rounded-2xl p-8 text-center">
                  <label className="cursor-pointer inline-flex flex-col items-center">
                    <svg className="w-16 h-16 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                    <span className="text-xl text-gray-600 mb-2">‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</span>
                    <span className="text-gray-400 text-sm">JPEG, PNG, ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡ßß‡ß¶ ‡¶è‡¶Æ‡¶¨‡¶ø</span>
                    <input type="file" className="hidden" accept="image/*" onChange={(e) => handleFileChange('front', e)} />
                  </label>
                  {nidFront && <div className="mt-4 text-green-600">‚úì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá</div>}
                </div>
              </div>

              <div>
                <div className="flex items-center gap-3 mb-4">
                  <span className="text-4xl">üÜî</span>
                  <h3 className="text-2xl font-bold">‡¶™‡¶∞‡¶ø‡¶ö‡¶Ø‡¶º‡¶™‡¶§‡ßç‡¶∞ ‡¶™‡¶ø‡¶õ‡¶®‡ßá‡¶∞ ‡¶¶‡¶ø‡¶ï</h3>
                </div>
                <div className="border-2 border-dashed border-gray-300 rounded-2xl p-8 text-center">
                  <label className="cursor-pointer inline-flex flex-col items-center">
                    <svg className="w-16 h-16 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                    <span className="text-xl text-gray-600 mb-2">‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</span>
                    <span className="text-gray-400 text-sm">JPEG, PNG, ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡ßß‡ß¶ ‡¶è‡¶Æ‡¶¨‡¶ø</span>
                    <input type="file" className="hidden" accept="image/*" onChange={(e) => handleFileChange('back', e)} />
                  </label>
                  {nidBack && <div className="mt-4 text-green-600">‚úì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá</div>}
                </div>
              </div>

              <div className="flex justify-between pt-6">
                <button
                  onClick={() => setStep(1)}
                  className="px-12 py-4 bg-gray-200 hover:bg-gray-300 text-gray-700 text-2xl font-medium rounded-full transition-colors"
                >
                  ‚Üê ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶¨‡¶∞‡ßç‡¶§‡ßÄ
                </button>
                <button
                  onClick={handleFinalSubmit}
                  disabled={loading}
                  className="px-12 py-4 bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white text-2xl font-medium rounded-full transition-colors"
                >
                  {loading ? '‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...' : '‡¶¶‡ßã‡¶ï‡¶æ‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®'}
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
